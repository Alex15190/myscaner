%scaner_name myfirstscaner  

%codes_type codes  

%ident_name Id

%idents {[:Letter:]|[:letter:]|_}{[:Letter:]|[:letter:]|_|[:digits:]}

%class_members
"__int128 integer_part;
__int128 fractional_part;
size_t exponent;
ssize_t exp_sign;
size_t frac_part_num_digits;
bool is_float;
char32_t precision;
char32_t char32_code;
__float128 build_float();"

%token_fields
"unsigned __int128 int_val; __float128 float_val;"
%codes 
k1,   k2,   k3,   k4,   k5,   k6,   k7,   k8,   k9,   k10,
k11,  k12,  k13,  k14,  k15,  k16,  k17,  k18,  k19,  k20,
k21,  k22,  k23,  k24,  k25,  k26,  k27,  k28,  k29,  k30,
k31,  k32,  k33,  k34,  k35,  k36,  k37,  k38,  k39,  k40,
k41,  k42,  k43,  k44,  k45,  k46,  k47,  k48,  k49,  k50,
k51,  k52,  k53,  k54,  k55,  k56,  k57,  k58,  
d1,   d2,   d3,   d4,   d5,   d6,   d7,   d8,   d9,   d10,
d11,  d12,  d13,  d14,  d15,  d16,  d17,  d18,  d19,  d20,
d21,  d22,  d23,  d24,  d25,  d26,  d27,  d28,  d29,  d30,
d31,  d32,  d35,  d36,  d37,  d38,  d39,  d40,
d41,  d42,  d43,  d44,  d45,  d46,  d47,  d48,  d49

%impl_additions "
#include <quadmath> 
size_t digit2int(char32_t ch)
{
size_t v =  ch - U'0';
return (v<=9)? v:(v&0b1101'1111) - 7;
};
__float128 myfirstscaner::build_float()
{
__float128 num;                                                                               
num = int_value + fract_part*powq(10, num_of_digits);
num = num*powq(10, sign_of_degree*exponent);
return num;}"

%keywords
"module" : k1,
"import" : k2,
"export" : k3,
"var" : k4,
"type" : k5,
"array" : k6,
"long short" : k7,
"int" : k8,
"float" : k9,
"uint" : k10,
"bool" : k11,
"char" : k12,
"string" : k13,
"void" : k14,
"byte" : k15,
"int8_t" : k16,
"int16_t" : k17,
"int32_t" : k18,
"int64_t" : k19,
"int128_t" : k20,
"uint8_t" : k21,
"uint16_t" : k22,
"uint32_t" : k23,
"uint64_t" : k24,
"uint128_t" : k25,
"float32_t" : k26,
"float64_t" : k27,
"float128_t" : k28,
"bool8_t" : k29,
"bool16_t" : k30,
"bool32_t" : k31,
"bool64_t" : k32,
"chat8_t" : k33,
"char16_t" : k34,
"char32_t" : k35,
"string8_t" : k36,
"string16_t" : k37,
"string32_t" : k38,
"val" : k39,
"ref" : k40,
"const" : k41,
"enum" : k42,
"struct" : k43,
"fn" : k44,
"true" : k45,
"false" : k46,
"if" : k47,
"then" : k48,
"elif" : k49,
"else" : k50,
"endif" : k51,
"for" : k52,
"while" : k53,
"repeat" : k54,
"until" : k55,
"read" : k56,
"print" : k57,
"match" : k58

%delimiters
"?" : d1,
"||" : d2,
"!||" : d3,
"^^" : d4,
"!^^" : d5,
"&&" : d6,
"!&&" : d7,
"!" : d8,
"<" : d9,
">" : d10,
"<=" : d11,
">=" : d12,
"=" : d13,
"!=" : d14,
"|" : d15,
"~|" : d16,
"^" : d17,
"~^" : d18,
"&" : d19,
"~&" : d20,
"<<" : d21,
">>" : d22,
">>>" : d23,
"~" : d24,
"+" : d25,
"-" : d26,
"*" : d27,
"/" : d28,
"%" : d29,
"/." : d30,
"**" : d31,
"**." : d32,
"#" : d35,
"##" : d36,
"|:" : d37,
"::" : d38,
"{" : d39,
"}" : d40,
"<-" : d41,
"[:" : d42,
":]" : d43,
"," : d44,
";" : d45,
"<:" : d46,
":>" : d47,
":" : d48,
":=" : d49

%strings "buffer.clear();":"token.code=(buffer.length()==1)?Char:String;"

%action write_by_code "buffer += char_code;"
%action add_dec_digit_to_char_code "char_code = char_code * 10 + digit2int(ch);"
%action add_oct_digit_to_char_code "char_code = char_code * 8 + digit2int(ch);"
%action add_bin_digit_to_char_code "char_code = char_code * 2 + digit2int(ch);"
%action add_hex_digit_to_char_code "char_code = char_code * 16 + digit2int(ch);"

{
(\$([:digits:]$add_dec_digit_to_char_code('?[:digits:]$add_dec_digit_to_char_code)*|
   0o[:odigits:]$add_oct_digit_to_char_code('?[:odigits:]$add_oct_digit_to_char_code)*|
0(b|B)[:bdigits:]$add_bin_digit_to_char_code('?[:bdigits:]$add_bin_digit_to_char_code)*|
0(x|X)[:xdigits:]$add_hex_digit_to_char_code('?[:xdigits:]$add_hex_digit_to_char_code)*)$write_by_code)*|
("([:ndq:]$write|""$write)*"(\$([:digits:]$add_dec_digit_to_char_code('?[:digits:]$add_dec_digit_to_char_code)*|
   0o[:odigits:]$add_oct_digit_to_char_code('?[:odigits:]$add_oct_digit_to_char_code)*|
0(b|B)[:bdigits:]$add_bin_digit_to_char_code('?[:bdigits:]$add_bin_digit_to_char_code)*|
0(x|X)[:xdigits:]$add_hex_digit_to_char_code('?[:xdigits:]$add_hex_digit_to_char_code)*)$write_by_code)+)*

} 


%numbers "int_val = 0;
          float_val = 0;
          is_float = false;
          integer_part = 0;
          fractional_part = 0;
          exponent = 1;
          exp_sign = 1;
          frac_part_num_digits = 0;
          token.code = Integer;"
          :
          "
          if(is_float){
            token.float_val=build_float();
            token.code = precision2code(precision);
          } else {
            token.int_val=integer_part;
            token.code = Integer;
          }"	
          %action addHexDigit "integer_part = (integer_part << 4) + digit2int(ch);"
          %action addDecDigit "integer_part = integer_part * 10 + digit2int(ch);"
          %action addBinDigit "integer_part = (integer_part << 1) + digit2int(ch);"
          %action addOctDigit "integer_part = (integer_part << 3) + digit2int(ch);"
          %action setIsFloat "is_float = true;"
          %action addDigitToDegree "exponent = exponent * 10 + digit2int(ch);"
          %action addDecToFrac "fractional_part = fractional_part / 10 + digit2int(ch); frac_part_num_digits += 1;"
          %action setExpSign "exp_sign = setexp(ch);"
          %action setPrecision "precision = ch; is_float = true;"
	                                
{[:digits:]$addDecDigit('?[:digits:]$addDecDigit)*(.$setIsFloat[:digits:]$addDecToFrac('?[:digits:]$addDecToFrac*))
?(((S|s)|(D|d)|(E|e)|(Q|q))$setPrecision+|-$setExpSign?[:digits:]$addDigitToDegree('?[:digits:]$addDigitToDegree)*)?|
0o[:odigits:]$addOctDigit('?[:odigits:]$addOctDigit)*|
0(b|B)[:bdigits:]$addBinDigit('?[:bdigits:]$addBinDigit)*|
0(x|X)[:xdigits:]$addHexDigit('?[:xdigits:]$addHexDigit)*}
